generator client {
provider = "prisma-client-js"
}

datasource db {
provider = "postgresql"
url      = env("DATABASE_URL")
}

// =========================================================================
// ENUMERACIONES DEL SISTEMA CORE
// =========================================================================

enum UserRole {
SUPERADMIN           // Administrador del sistema
CONCURSO_ADMIN       // Administrador de compañía
REGISTRADOR          // Registrador de participantes
}

enum SubscriptionStatus {
ACTIVO
EXPIRADO
SUSPENDIDO
CANCELADO
}

enum SubscriptionPlan {
BASICO
PROFESIONAL
EMPRESARIAL
}

enum CompanyRequestStatus {
PENDIENTE            // Solicitud enviada, esperando aprobación
APROBADA             // Solicitud aprobada, compañía creada
RECHAZADA            // Solicitud rechazada
EN_REVISION          // En proceso de revisión
}

enum NotificationType {
USER_CREATED         // Usuario creado
USER_UPDATED         // Usuario actualizado
USER_DELETED         // Usuario eliminado
COMPANY_CREATED      // Compañía creada
COMPANY_UPDATED      // Compañía actualizada
SUBSCRIPTION_CREATED // Suscripción creada
SUBSCRIPTION_UPDATED // Suscripción actualizada
SUBSCRIPTION_EXPIRED // Suscripción expirada
SYSTEM_ALERT         // Alerta del sistema
PAYMENT_RECEIVED     // Pago recibido
PAYMENT_FAILED       // Pago fallido
CONTEST_CREATED      // Concurso creado
CONTEST_UPDATED      // Concurso actualizado
CONTEST_PUBLISHED    // Concurso publicado
}

enum NotificationStatus {
UNREAD
READ
ARCHIVED
}

enum ContestStatus {
BORRADOR             // En preparación
PUBLICADO            // Publicado y visible
INSCRIPCIONES_ABIERTAS // Inscripciones abiertas
INSCRIPCIONES_CERRADAS // Inscripciones cerradas
EN_CURSO             // Concurso en desarrollo
FINALIZADO           // Concurso terminado
CANCELADO            // Concurso cancelado
}

enum TipoGanado {
BOVINO
EQUINO
PORCINO
OVINO
CAPRINO
AVIAR
MASCOTAS
OTROS
}

// NUEVA ENUMERACIÓN PARA SEXO DE GANADO
enum SexoGanado {
MACHO
HEMBRA
MIXTO // Para categorías que aceptan ambos o no especifican
}

// NUEVA ENUMERACIÓN PARA TIPO DE PUNTAJE
enum TipoPuntaje {
NUMERICO             // Puntaje numérico (0-100)
POSICION             // Posición (1er lugar, 2do lugar, etc.)
CALIFICACION         // Calificación (A, B, C, etc.)
PUNTOS               // Sistema de puntos personalizado
}

// =========================================================================
// MODELO DE USUARIO (OPTIMIZADO PARA ADMIN DASHBOARD)
// =========================================================================

model User {
id        String   @id @default(cuid())
email     String   @unique
password  String
nombre    String
apellido  String
telefono  String?
role      UserRole @default(REGISTRADOR)
companyId String?
company   Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
isActive  Boolean  @default(true)

// Campos adicionales para SUPERADMIN
isSuperAdmin Boolean @default(false)   // Flag adicional de seguridad

// Campos para gestión de acceso
contestAccess   Boolean  @default(false)  // Acceso a funcionalidades de concursos
lastLogin       DateTime?                  // Último inicio de sesión
emailVerified   Boolean  @default(false)   // Email verificado
profileImage    String?                    // URL de imagen de perfil (Cloudinary)

// Metadatos de usuario
preferences     Json?                      // Preferencias del usuario en JSON
metadata        Json?                      // Metadatos adicionales

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

// Relaciones esenciales
passwordResetTokens     PasswordResetToken[]
companyRequestsReviewed CompanyRequest[]
notifications           Notification[]
auditLogs               AuditLog[]
companiesCreated        Company[]            @relation("CompanyCreator")
uploadedMedia           Media[]
contestsCreated         Contest[]            @relation("ContestCreator")
ganadoCreado            Ganado[]             @relation("GanadoCreator")
programImages           ProgramImage[]       @relation("ProgramImageUploader")


@@index([email])
@@index([companyId])
@@index([role])
@@index([isActive])
@@index([lastLogin])
@@map("users")
}

// =========================================================================
// MODELO PARA TOKENS DE RESET DE CONTRASEÑA
// =========================================================================

model PasswordResetToken {
id        String   @id @default(cuid())
token     String   @unique
userId    String
user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
expiresAt DateTime
used      Boolean  @default(false)
createdAt DateTime @default(now())

@@index([token])
@@index([userId])
@@index([expiresAt])
@@map("password_reset_tokens")
}

// =========================================================================
// MODELO DE COMPAÑÍA (OPTIMIZADO PARA ADMIN DASHBOARD)
// =========================================================================

model Company {
id          String             @id @default(cuid())
nombre      String             // Nombre interno/administrativo
publicName  String?            // Nombre público (display name)
slug        String             @unique
email       String
telefono    String?
direccion   String?
logo        String?            // URL de Cloudinary
logoPublicId String?           // Public ID de Cloudinary para gestión
descripcion String?            @db.Text
website     String?
ubicacion   String?
isFeatured  Boolean            @default(false)
isPublished Boolean            @default(false)
isActive    Boolean            @default(true)

// Información adicional para admin
tipoOrganizacion String?        // Tipo de organización
nit             String?         // NIT o identificación fiscal
representanteLegal String?      // Representante legal
contactoPrincipal String?       // Contacto principal

// SEO y Marketing
metaTitle       String?         // Meta título para SEO
metaDescription String?         // Meta descripción para SEO
socialLinks     Json?           // Enlaces de redes sociales en JSON

// Estadísticas y métricas
viewCount       Int             @default(0)    // Contador de vistas
rating          Float?          @default(0)    // Calificación promedio
reviewCount     Int             @default(0)    // Número de reseñas

// Gestión administrativa
createdById     String?         // Usuario que creó la compañía
createdBy       User?           @relation("CompanyCreator", fields: [createdById], references: [id])
approvedAt      DateTime?       // Fecha de aprobación
approvedById    String?         // Usuario que aprobó

createdAt   DateTime           @default(now())
updatedAt   DateTime           @updatedAt

// Suscripción
subscription   Subscription?
subscriptionId String?       @unique

// Relaciones
users     User[]
companyRequest CompanyRequest?
contests  Contest[]
propietarios Propietario[]
expositores  Expositor[]
ganado       Ganado[] // Ganado general de la compañía (inventario)
establos     Establo[] // Establos de la compañía


@@index([slug])
@@index([email])
@@index([isPublished])
@@index([isFeatured])
@@index([isActive])
@@index([createdById])
@@index([createdAt])
@@map("companies")
}

// =========================================================================
// MODELO DE CONCURSOS
// =========================================================================

model Contest {
id                    String        @id @default(cuid())
nombre                String        // Nombre del concurso
slug                  String        @unique
descripcion           String?       @db.Text
imagenPrincipal       String?       // URL de Cloudinary
imagenPublicId        String?       // Public ID de Cloudinary

// Fechas importantes
fechaInicio           DateTime
fechaFin              DateTime?
fechaInicioRegistro   DateTime?
fechaFinRegistro      DateTime?

// Ubicación y logística
ubicacion             String?
direccion             String?
capacidadMaxima       Int?
cuotaInscripcion      Decimal?      @db.Decimal(10, 2)

// Información del concurso
tipoGanado            TipoGanado[] // Tipos generales permitidos
categorias            String[]      // Array de categorías (for backward compatibility)
premiacion            Json?         // Estructura de premios en JSON
reglamento            String?       @db.Text
auspiciadores         Json?         // Array de auspiciadores: [{ nombre: string, imagen: string, id: string }] // Considerar mover a tabla

// Sistema de puntaje del concurso
tipoPuntaje           TipoPuntaje   @default(NUMERICO) // Tipo de sistema de puntaje
puntajeMinimo         Float?        @default(0)        // Puntaje mínimo (para NUMERICO)
puntajeMaximo         Float?        @default(100)      // Puntaje máximo (para NUMERICO)
posicionesDisponibles Int?          @default(10)       // Número de posiciones (para POSICION)
calificacionesCustom  String[]      @default([])       // Calificaciones personalizadas (para CALIFICACION)

// Contacto
contactoOrganizador   String?
telefonoContacto      String?
emailContacto         String?

// Configuraciones
requisitoEspeciales   String?       @db.Text
isPublic              Boolean       @default(true)
isActive              Boolean       @default(true)
isFeatured            Boolean       @default(false)
permitirRegistroTardio Boolean      @default(false)

// Estado del concurso
status                ContestStatus @default(BORRADOR)

// SEO y Marketing
metaTitle             String?
metaDescription       String?
tags                  String[]      // Tags para búsqueda

// Estadísticas
viewCount             Int           @default(0)
participantCount      Int           @default(0) // Total de animales/productos inscritos
registrationCount     Int           @default(0) // Total de registros de personas/entidades

// Relaciones
companyId             String
company               Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)

createdById           String?
createdBy             User?         @relation("ContestCreator", fields: [createdById], references: [id])

events                Event[]
contestCategories     ContestCategory[] // Categorías específicas de este concurso
ganadoParticipante    Ganado[]          @relation("ContestParticipants") // Ganado inscrito en este concurso


createdAt             DateTime      @default(now())
updatedAt             DateTime      @updatedAt

@@index([slug])
@@index([companyId])
@@index([status])
@@index([isPublic])
@@index([isFeatured])
@@index([isActive])
@@index([fechaInicio])
@@index([fechaFin])
@@index([createdById])
@@index([createdAt])
@@map("contests")
}

// =========================================================================
// MODELO DE CATEGORÍAS DE CONCURSO (NUEVO)
// =========================================================================
model ContestCategory {
  id            String    @id @default(cuid())
  nombre        String
  descripcion   String?   @db.Text
  orden         Int       @default(0)
  // Criterios pueden ser flexibles, por ejemplo:
  // tipo: "EDAD_RAZA_PESO", "CALIDAD_PRODUCTO", etc.
  // criteriosJson: Json?  // { "edadMinMeses": 6, "edadMaxMeses": 12, "sexo": "HEMBRA", "razasPermitidas": ["Holstein", "Jersey"] }
  criteriosEdadMinMeses Int?
  criteriosEdadMaxMeses Int?
  criteriosPesoMinKg    Float?
  criteriosPesoMaxKg    Float?
  criteriosSexo         SexoGanado? // MACHO, HEMBRA, MIXTO
  // Para productos, podrían ser otros campos o un JSON más genérico

  contestId     String
  contest       Contest   @relation(fields: [contestId], references: [id], onDelete: Cascade)
  
  ganadoEnCategoria Ganado[] @relation("GanadoInCategory")

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([contestId, nombre])
  @@index([contestId])
  @@map("contest_categories")
}


// =========================================================================
// MODELO DE SUSCRIPCIÓN (MEJORADO)
// =========================================================================

model Subscription {
id                String             @id @default(cuid())
companyId         String             @unique
company           Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
plan              SubscriptionPlan   @default(BASICO)
status            SubscriptionStatus @default(ACTIVO)

// Límites y uso
maxUsers          Int                @default(5)    // Límite de usuarios
usersUsed         Int                @default(0)    // Usuarios utilizados
maxStorage        Int                @default(1000) // Límite de almacenamiento en MB
storageUsed       Int                @default(0)    // Almacenamiento utilizado
maxConcursos      Int                @default(10)   // Límite de concursos
concursosUsados   Int                @default(0)    // Concursos utilizados

// Fechas importantes
fechaInicio       DateTime           @default(now())
fechaExpiracion   DateTime
fechaRenovacion   DateTime?
lastPayment       DateTime?
nextPayment       DateTime?

// Información financiera
precio            Decimal            @db.Decimal(10, 2)
currency          String             @default("COP")
paymentMethod     String?            // Método de pago
transactionId     String?            // ID de transacción

// Configuraciones
contestAccessEnabled Boolean            @default(true) // Acceso global a concursos habilitado
autoRenewal          Boolean            @default(false) // Renovación automática
notificationsEnabled Boolean            @default(true)  // Notificaciones habilitadas

// Notas administrativas
notas             String?            @db.Text
internalNotes     String?            @db.Text // Notas internas del admin

createdAt         DateTime           @default(now())
updatedAt         DateTime           @updatedAt

@@index([status])
@@index([fechaExpiracion])
@@index([plan])
@@map("subscriptions")
}

// =========================================================================
// MODELO DE SOLICITUDES DE COMPAÑÍA (MEJORADO)
// =========================================================================

model CompanyRequest {
id                String               @id @default(cuid())
// Información del solicitante
nombre            String
apellido          String
email             String               @unique
telefono          String?

// Información de la compañía solicitada
nombreCompania    String
descripcionCompania String?            @db.Text
tipoOrganizacion  String?              // "Asociación Ganadera", "Cooperativa", etc.
ubicacion         String?
website           String?
nit               String?              // NIT o identificación fiscal

// Documentación de soporte
documentos        String[]             // URLs de documentos subidos (Cloudinary)
documentosPublicIds String[]           // Public IDs de Cloudinary
motivacion        String?              @db.Text // Por qué quiere crear la compañía
experiencia       String?              @db.Text // Experiencia previa organizando eventos

// Estado de la solicitud
status            CompanyRequestStatus @default(PENDIENTE)
notas             String?              @db.Text // Notas del revisor
internalNotes     String?              @db.Text // Notas internas

// Relaciones
reviewedById      String?              // SUPERADMIN que revisó
reviewedBy        User?                @relation(fields: [reviewedById], references: [id])
reviewedAt        DateTime?

// Compañía creada (si fue aprobada)
companyId         String?              @unique
company           Company?             @relation(fields: [companyId], references: [id])

// Seguimiento
priority          Int                  @default(1) // Prioridad de revisión (1-5)
tags              String[]             // Tags para categorización

createdAt         DateTime             @default(now())
updatedAt         DateTime             @updatedAt

@@index([status])
@@index([email])
@@index([reviewedById])
@@index([priority])
@@index([createdAt])
@@map("company_requests")
}

// =========================================================================
// MODELO DE NOTIFICACIONES (MEJORADO)
// =========================================================================

model Notification {
id          String             @id @default(cuid())
type        NotificationType
title       String
message     String             @db.Text
status      NotificationStatus @default(UNREAD)

// Datos adicionales en JSON
metadata    Json?              // Información adicional específica del tipo

// Usuario destinatario (null = notificación global)
userId      String?
user        User?              @relation(fields: [userId], references: [id], onDelete: Cascade)

// Información de contexto
entityType  String?            // "user", "company", "subscription", etc.
entityId    String?            // ID de la entidad relacionada

// Configuración de notificación
priority    Int                @default(1) // Prioridad (1-5)
expiresAt   DateTime?          // Fecha de expiración
actionUrl   String?            // URL de acción

createdAt   DateTime           @default(now())
readAt      DateTime?

@@index([userId, status])
@@index([type])
@@index([priority])
@@index([createdAt])
@@index([expiresAt])
@@map("notifications")
}

// =========================================================================
// MODELO DE AUDITORÍA (MEJORADO)
// =========================================================================

model AuditLog {
id          String   @id @default(cuid())
action      String   // "CREATE", "UPDATE", "DELETE", etc.
entityType  String   // "User", "Company", "Subscription", etc.
entityId    String   // ID de la entidad afectada

// Datos del cambio
oldValues   Json?    // Valores anteriores
newValues   Json?    // Valores nuevos
changes     Json?    // Resumen de cambios específicos

// Usuario que realizó la acción
userId      String
user        User     @relation(fields: [userId], references: [id])

// Información adicional
ipAddress   String?
userAgent   String?
sessionId   String?  // ID de sesión
requestId   String?  // ID de request para trazabilidad

// Contexto adicional
description String?  // Descripción legible del cambio
severity    String   @default("info") // "info", "warning", "error"
category    String?  // Categoría del cambio

createdAt   DateTime @default(now())

@@index([entityType, entityId])
@@index([userId])
@@index([action])
@@index([severity])
@@index([createdAt])
@@map("audit_logs")
}

// =========================================================================
// MODELO DE ALERTAS DEL SISTEMA (MEJORADO)
// =========================================================================

model Alert {
id          String   @id @default(cuid())
type        String   // e.g., "warning", "info", "error", "success"
title       String
description String   @db.Text
date        DateTime @default(now())
priority    String   // e.g., "high", "medium", "low"
isActive    Boolean  @default(true)
isResolved  Boolean  @default(false)

// Información adicional
category    String?  // Categoría de la alerta
entityType  String?  // Tipo de entidad relacionada
entityId    String?  // ID de la entidad relacionada
actionUrl   String?  // URL para resolver la alerta

// Resolución
resolvedAt  DateTime?
resolvedBy  String?  // ID del usuario que resolvió
resolution  String?  @db.Text // Descripción de la resolución

createdAt   DateTime @default(now())
updatedAt   DateTime @updatedAt

@@index([type])
@@index([priority])
@@index([isActive])
@@index([isResolved])
@@index([createdAt])
@@map("alerts")
}

// =========================================================================
// MODELO DE ARCHIVOS/MEDIOS (NUEVO - PARA CLOUDINARY)
// =========================================================================

model Media {
id          String   @id @default(cuid())
filename    String   // Nombre original del archivo
publicId    String   @unique // Public ID de Cloudinary
url         String   // URL completa de Cloudinary
secureUrl   String   // URL segura de Cloudinary
format      String   // Formato del archivo (jpg, png, etc.)
resourceType String  @default("image") // image, video, raw, auto
bytes       Int      // Tamaño en bytes
width       Int?     // Ancho (para imágenes)
height       Int?     // Alto (para imágenes)

// Información de contexto
entityType  String?  // Tipo de entidad asociada
entityId    String?  // ID de la entidad asociada
folder      String?  // Carpeta en Cloudinary
tags        String[] // Tags de Cloudinary

// Usuario que subió el archivo
uploadedById String?
uploadedBy   User?   @relation(fields: [uploadedById], references: [id])

// Metadatos
alt         String?  // Texto alternativo
caption     String?  // Descripción/caption
metadata    Json?    // Metadatos adicionales de Cloudinary

createdAt   DateTime @default(now())
updatedAt   DateTime @updatedAt

@@index([publicId])
@@index([entityType, entityId])
@@index([uploadedById])
@@index([folder])
@@index([createdAt])
@@map("media")
}

// =========================================================================
// MODELO DE IMÁGENES DE PROGRAMACIÓN (NUEVO)
// =========================================================================
model ProgramImage {
  id          String   @id @default(cuid())
  title       String   // Título de la imagen/evento
  description String?  @db.Text // Descripción detallada del evento
  imageUrl    String   // URL de Cloudinary
  publicId    String   @unique // Public ID de Cloudinary
  order       Int      @default(0) // Orden de visualización
  isActive    Boolean  @default(true)
  
  // Información del evento
  eventDate   DateTime? // Fecha del evento (opcional)
  eventTime   String?   // Hora del evento
  location    String?   // Ubicación del evento
  
  // Usuario que subió la imagen
  uploadedById String?
  uploadedBy   User?    @relation("ProgramImageUploader", fields: [uploadedById], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([order])
  @@index([isActive])
  @@index([eventDate])
  @@index([uploadedById])
  @@map("program_images")
}

// =========================================================================
// MODELO DE EVENTOS DEL CONCURSO
// =========================================================================

model Event {
  id            String    @id @default(cuid())
  title         String
  description   String?   @db.Text
  featuredImage String?
  startDate     DateTime
  endDate       DateTime?
  contestId     String
  contest       Contest   @relation(fields: [contestId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([contestId])
  @@map("events")
}

// =========================================================================
// MODELO DE ESTABLO (NUEVO)
// =========================================================================
model Establo {
  id              String    @id @default(cuid())
  nombre          String
  descripcion     String?   @db.Text
  ubicacion       String?
  direccion       String?
  telefono        String?
  email           String?
  propietario     String?   // Nombre del propietario del establo
  capacidad       Int?      // Capacidad de animales
  tipoGanado      TipoGanado[] // Tipos de ganado que maneja
  certificaciones String[]  // Certificaciones del establo
  
  companyId       String?   // Compañía a la que pertenece el establo
  company         Company?  @relation(fields: [companyId], references: [id])

  ganado          Ganado[]  @relation("EstabloGanado")

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([companyId])
  @@index([nombre])
  @@unique([companyId, nombre], name: "companyId_nombre")
  @@map("establos")
}

// =========================================================================
// MODELO DE PROPIETARIO (NUEVO)
// =========================================================================
model Propietario {
  id              String    @id @default(cuid())
  nombreCompleto  String
  documentoLegal  String?   @unique // Cédula/RUT/NIT
  telefono        String?
  email           String?   @unique
  direccion       String?
  datosBancarios  Json?     // Para pagos, etc.
  
  companyId       String?   // Compañía a la que pertenece el propietario (si aplica, ej. una empresa propietaria)
  company         Company?  @relation(fields: [companyId], references: [id])

  ganado          Ganado[]  @relation("PropietarioDeGanado")

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([email])
  @@index([companyId])
  @@unique([companyId, nombreCompleto], name: "companyId_nombreCompleto")
  @@map("propietarios")
}

// =========================================================================
// MODELO DE EXPOSITOR (NUEVO)
// =========================================================================
model Expositor {
  id                  String    @id @default(cuid())
  nombreCompleto      String
  documentoIdentidad  String?   @unique
  telefono            String?
  email               String?   @unique
  empresa             String?   // Nombre del establo o empresa que representa
  experiencia         String?   @db.Text
  certificaciones     String[]  // URLs o IDs de documentos de certificación
  
  companyId           String?   // Compañía a la que está afiliado el expositor (si aplica)
  company             Company?  @relation(fields: [companyId], references: [id])

  ganadoExpuesto      Ganado[]  @relation("ExpositorDeGanado")

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([email])
  @@index([companyId])
  @@unique([companyId, nombreCompleto], name: "companyId_nombreCompleto")
  @@map("expositores")
}

// =========================================================================
// MODELO DE GANADO (MEJORADO PARA PARTICIPANTES DE CONCURSO)
// =========================================================================
model Ganado {
  id                String    @id @default(cuid())
  nombre            String
  // slug              String?   @unique // Slug puede ser opcional o generado
  numeroFicha       String    // Número de registro/ficha para el concurso, debe ser único por concurso
  
  // Características
  tipoAnimal        String?
  raza              String?
  sexo              SexoGanado?
  fechaNacimiento   DateTime?
  pesoKg            Float?
  descripcion       String?   @db.Text
  imagenUrl         String?   // URL de Cloudinary
  imagenPublicId    String?   // Public ID de Cloudinary
  marcasDistintivas String?

  // Genealogía
  padre             String?   // Nombre o ID de registro del padre
  madre             String?   // Nombre o ID de registro de la madre
  lineaGenetica     String?

  // Estado y Comercial
  enRemate          Boolean   @default(false)
  precioBaseRemate  Decimal?  @db.Decimal(12, 2)
  isDestacado       Boolean   @default(false) // Para badge "Destacado"
  isGanador         Boolean   @default(false) // Si ha ganado algo
  premiosObtenidos  String[]  // Lista de premios ganados

  // Puntuación en el concurso - MEJORADO
  puntaje           Float?    // Puntaje obtenido en el concurso (0-100)
  posicion          Int?      // Posición obtenida (1er lugar, 2do lugar, etc.)
  calificacion      String?   // Calificación obtenida (A, B, C, etc.)

  // Relaciones
  companyId         String?   // Compañía dueña del animal (inventario general)
  company           Company?  @relation(fields: [companyId], references: [id])

  propietarioId     String?
  propietario       Propietario? @relation("PropietarioDeGanado", fields: [propietarioId], references: [id])
  
  expositorId       String?
  expositor         Expositor?   @relation("ExpositorDeGanado", fields: [expositorId], references: [id])

  // NUEVA RELACIÓN CON ESTABLO
  establoId         String?
  establo           Establo?     @relation("EstabloGanado", fields: [establoId], references: [id])

  // Campos para participación en concurso
  contestId         String    // Concurso en el que participa
  contest           Contest   @relation("ContestParticipants", fields: [contestId], references: [id], onDelete: Cascade)
  
  contestCategoryId String?   // Categoría del concurso en la que participa
  contestCategory   ContestCategory? @relation("GanadoInCategory", fields: [contestCategoryId], references: [id])

  // Auditoría
  createdById       String?
  createdBy         User?     @relation("GanadoCreator", fields: [createdById], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([contestId, numeroFicha], name: "contest_ficha_unique") // numeroFicha debe ser único por concurso
  @@index([companyId])
  @@index([propietarioId])
  @@index([expositorId])
  @@index([establoId])
  @@index([contestId])
  @@index([contestCategoryId])
  @@index([puntaje])
  @@index([posicion])
  @@map("ganado")
}
